apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: voice-assistant-hpa
  namespace: npcl-voice-assistant
  labels:
    app: voice-assistant
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: voice-assistant
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: active_sessions
      target:
        type: AverageValue
        averageValue: "5"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: voice-assistant-metrics
  namespace: npcl-voice-assistant
  labels:
    app: voice-assistant
    component: monitoring
spec:
  selector:
    matchLabels:
      app: voice-assistant
      component: api
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: voice-assistant-pdb
  namespace: npcl-voice-assistant
  labels:
    app: voice-assistant
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: voice-assistant
      component: api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: voice-assistant-network-policy
  namespace: npcl-voice-assistant
spec:
  podSelector:
    matchLabels:
      app: voice-assistant
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: npcl-voice-assistant
    - podSelector:
        matchLabels:
          app: asterisk
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8090
  - from: []
    ports:
    - protocol: TCP
      port: 9090  # Metrics
    - protocol: TCP
      port: 8080  # Dashboard
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: asterisk
    ports:
    - protocol: TCP
      port: 8088
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: voice-assistant-sounds
  namespace: npcl-voice-assistant
  labels:
    app: voice-assistant
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs-client  # Adjust based on your storage class
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: voice-assistant-cleanup
  namespace: npcl-voice-assistant
  labels:
    app: voice-assistant
    component: maintenance
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cleanup
            image: npcl/voice-assistant:latest
            command:
            - python
            - -c
            - |
              import os
              import time
              import glob
              
              # Clean up old audio files (older than 7 days)
              sounds_dir = "/app/sounds/temp"
              cutoff_time = time.time() - (7 * 24 * 3600)
              
              for file_path in glob.glob(f"{sounds_dir}/*.wav"):
                  if os.path.getmtime(file_path) < cutoff_time:
                      os.remove(file_path)
                      print(f"Removed old file: {file_path}")
              
              print("Cleanup completed")
            volumeMounts:
            - name: sounds
              mountPath: /app/sounds
          volumes:
          - name: sounds
            persistentVolumeClaim:
              claimName: voice-assistant-sounds
          restartPolicy: OnFailure