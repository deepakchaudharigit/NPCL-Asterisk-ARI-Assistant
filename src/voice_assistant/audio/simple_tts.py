#!/usr/bin/env python3
"""
Simple TTS fallback that works reliably on Windows without external dependencies.
This is a backup solution when both Google TTS and pyttsx3 fail.
"""

import subprocess
import sys
import os
import re
from typing import Optional


def clean_text_for_windows_tts(text: str, language_code: str = "en-IN") -> str:
    """Clean text specifically for Windows SAPI TTS"""
    
    # Basic cleaning
    cleaned_text = text
    
    # Remove problematic characters
    replacements = {
        '/': ' ',
        '\n': ' ',
        '\t': ' ',
        '‡•§': '.',
        '‡••': '.',
        '?': '.',
        '!': '.',
        '"': '',
        "'": '',
        '(': '',
        ')': '',
        '[': '',
        ']': '',
        '{': '',
        '}': '',
        '*': '',
        '#': '',
        '@': '',
        '$': '',
        '%': '',
        '^': '',
        '&': ' and ',
        '+': ' plus ',
        '=': ' equals ',
        '<': '',
        '>': '',
        '|': '',
        '\\': '',
        '~': '',
        '`': '',
    }
    
    # Apply replacements
    for old, new in replacements.items():
        cleaned_text = cleaned_text.replace(old, new)
    
    # For Hindi, convert to phonetic English
    if language_code == "hi-IN":
        # Convert Hindi text to phonetic English for better pronunciation
        hindi_to_phonetic = {
            '‡§®‡§Æ‡§∏‡•ç‡§§‡•á': 'namaste',
            '‡§∏‡§∞': 'sir',
            '‡§Æ‡•à‡§°‡§Æ': 'madam',
            '‡§è‡§®‡§™‡•Ä‡§∏‡•Ä‡§è‡§≤': 'N P C L',
            '‡§®‡•ã‡§è‡§°‡§æ': 'noida',
            '‡§™‡§æ‡§µ‡§∞': 'power',
            '‡§ï‡•â‡§∞‡•ç‡§™‡•ã‡§∞‡•á‡§∂‡§®': 'corporation',
            '‡§≤‡§ø‡§Æ‡§ø‡§ü‡•á‡§°': 'limited',
            '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï': 'customer',
            '‡§∏‡•á‡§µ‡§æ': 'service',
            '‡§Æ‡•á‡§Ç': 'mein',
            '‡§Ü‡§™‡§ï‡§æ': 'aapka',
            '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§': 'swagat',
            '‡§π‡•à': 'hai',
            '‡§Æ‡•à‡§Ç': 'main',
            '‡§Ü‡§™‡§ï‡•Ä': 'aapki',
            '‡§ï‡•à‡§∏‡•á': 'kaise',
            '‡§Æ‡§¶‡§¶': 'madad',
            '‡§ï‡§∞': 'kar',
            '‡§∏‡§ï‡§§‡§æ': 'sakta',
            '‡§∏‡§ï‡§§‡•Ä': 'sakti',
            '‡§π‡•Ç‡§Ç': 'hun',
            '‡§ï‡•É‡§™‡§Ø‡§æ': 'kripaya',
            '‡§Æ‡•Å‡§ù‡•á': 'mujhe',
            '‡§Ö‡§™‡§®‡§æ': 'apna',
            '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®': 'connection',
            '‡§µ‡§ø‡§µ‡§∞‡§£': 'vivaran',
            '‡§Ø‡§æ': 'ya',
            '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§': 'complaint',
            '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ': 'number',
            '‡§¨‡§§‡§æ‡§è‡§Ç': 'batayen',
            '‡§¨‡§ø‡§ú‡§≤‡•Ä': 'electricity',
            '‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ': 'problem',
            '‡§ï‡§æ': 'ka',
            '‡§∏‡§æ‡§Æ‡§®‡§æ': 'samna',
            '‡§ï‡§∞': 'kar',
            '‡§∞‡§π‡•á': 'rahe',
            '‡§π‡•à‡§Ç': 'hain',
            '‡§¶‡•Å‡§É‡§ñ': 'dukh',
            '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞': 'area',
            '‡§®‡§π‡•Ä‡§Ç': 'nahin',
            '‡§™‡•Ç‡§∞‡§æ': 'pura',
            '‡§™‡§§‡§æ': 'address',
            '‡§î‡§∞': 'aur',
            '‡§®‡§Ç‡§¨‡§∞': 'number',
            '‡§§‡§æ‡§ï‡§ø': 'taki',
            '‡§¶‡§∞‡•ç‡§ú': 'register',
            '‡§∏‡§ï‡•Ç‡§Ç': 'sakun',
            '‡§ú‡§≤‡•ç‡§¶': 'jald',
            '‡§∏‡•á': 'se',
            '‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®': 'solution'
        }
        
        # Apply phonetic conversion
        for hindi, phonetic in hindi_to_phonetic.items():
            cleaned_text = cleaned_text.replace(hindi, phonetic)
    
    # Clean up multiple spaces
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)
    cleaned_text = cleaned_text.strip()
    
    return cleaned_text


def speak_with_windows_sapi(text: str, language_code: str = "en-IN") -> bool:
    """Use Windows SAPI for TTS (most reliable on Windows)"""
    try:
        # Clean text
        cleaned_text = clean_text_for_windows_tts(text, language_code)
        
        if not cleaned_text or len(cleaned_text.strip()) < 2:
            return False
        
        print("üîä Speaking (Windows SAPI)...")
        print(f"Text: {cleaned_text[:100]}..." if len(cleaned_text) > 100 else f"Text: {cleaned_text}")
        
        # Use PowerShell to call Windows SAPI\n        powershell_command = f'''\nAdd-Type -AssemblyName System.Speech\n$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer\n$speak.Rate = -2\n$speak.Volume = 100\n$speak.Speak(\"{cleaned_text}\")\n'''\n        \n        # Execute PowerShell command\n        result = subprocess.run(\n            [\"powershell\", \"-Command\", powershell_command],\n            capture_output=True,\n            text=True,\n            timeout=30\n        )\n        \n        if result.returncode == 0:\n            print(\"‚úÖ Speech completed (Windows SAPI)\")\n            print()\n            return True\n        else:\n            print(f\"‚ö†Ô∏è  Windows SAPI failed: {result.stderr}\")\n            return False\n            \n    except subprocess.TimeoutExpired:\n        print(\"‚ö†Ô∏è  Windows SAPI timeout\")\n        return False\n    except Exception as e:\n        print(f\"‚ö†Ô∏è  Windows SAPI error: {e}\")\n        return False\n\n\ndef speak_text_simple(text: str, language_code: str = \"en-IN\") -> bool:\n    \"\"\"Simple TTS that works on Windows without external dependencies\"\"\"\n    \n    # Skip empty text\n    if not text or len(text.strip()) < 2:\n        print(\"‚ö†Ô∏è  Text too short for TTS\")\n        return False\n    \n    # Try Windows SAPI first (most reliable on Windows)\n    if sys.platform == \"win32\":\n        success = speak_with_windows_sapi(text, language_code)\n        if success:\n            return True\n    \n    # If Windows SAPI fails, try basic pyttsx3\n    try:\n        import pyttsx3\n        \n        cleaned_text = clean_text_for_windows_tts(text, language_code)\n        \n        engine = pyttsx3.init()\n        engine.setProperty('rate', 100)\n        engine.setProperty('volume', 1.0)\n        \n        print(\"üîä Speaking (Basic TTS)...\")\n        print(f\"Text: {cleaned_text[:100]}...\" if len(cleaned_text) > 100 else f\"Text: {cleaned_text}\")\n        \n        engine.say(cleaned_text)\n        engine.runAndWait()\n        \n        try:\n            engine.stop()\n            del engine\n        except:\n            pass\n        \n        print(\"‚úÖ Speech completed (Basic TTS)\")\n        print()\n        return True\n        \n    except Exception as e:\n        print(f\"‚ö†Ô∏è  All TTS methods failed: {e}\")\n        print(\"üí° Text will be displayed only (no speech)\")\n        return False