#!/usr/bin/env python3
"""
Main entry point for NPCL Asterisk ARI Voice Assistant with Multi-Language Support
Provides multiple interaction modes including chat, voice, and combined modes with Gemini AI integration.

NPCL Voice Assistant - Main Entry Point with 12 Language Support
"""

import sys
import os
import asyncio
import json
import base64
import time
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent))

# Suppress warnings and debug messages for clean output
try:
    from suppress_warnings import *
except ImportError:
    # Fallback warning suppression
    os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = '1'
    import warnings
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    warnings.filterwarnings("ignore", category=UserWarning)

def print_banner():
    """Print application banner"""
    print("=" * 70)
    print("ЁЯМН NPCL Multilingual Voice Assistant")
    print("ЁЯОЖ Powered by Gemini 1.5 Flash")
    print("ЁЯЧгя╕П Supporting 12 Languages")
    print("=" * 70)

def print_language_selection():
    """Print language selection menu"""
    print("\nЁЯМН Choose Your Language / рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржмрзЗржЫрзЗ ржирж┐ржи:")
    print("=" * 60)
    print("1.  ЁЯЗоЁЯЗ│ English (India)")
    print("2.  ЁЯЗоЁЯЗ│ рд╣рд┐рдиреНрджреА (Hindi)")
    print("3.  ЁЯЗоЁЯЗ│ ржмрж╛ржВрж▓рж╛ (Bengali)")
    print("4.  ЁЯЗоЁЯЗ│ р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)")
    print("5.  ЁЯЗоЁЯЗ│ рдорд░рд╛рдареА (Marathi)")
    print("6.  ЁЯЗоЁЯЗ│ родрооро┐ро┤рпН (Tamil)")
    print("7.  ЁЯЗоЁЯЗ│ ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)")
    print("8.  ЁЯЗоЁЯЗ│ ╪з╪▒╪п┘И (Urdu)")
    print("9.  ЁЯЗоЁЯЗ│ р▓Хр▓ир│Нр▓ир▓б (Kannada)")
    print("10. ЁЯЗоЁЯЗ│ рмУрмбрм╝рм┐рмЖ (Odia)")
    print("11. ЁЯЗоЁЯЗ│ р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)")
    print("12. ЁЯЗмЁЯЗ╖ ╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м (Greek)")
    print("=" * 60)

def get_language_choice():
    """Get user's language choice"""
    while True:
        try:
            choice = input("\nEnter your choice (1-12): ").strip()
            if choice in [str(i) for i in range(1, 13)]:
                return int(choice)
            else:
                print("тЭМ Invalid choice. Please enter 1-12.")
        except KeyboardInterrupt:
            print("\nЁЯСЛ Goodbye!")
            return None
        except Exception:
            print("тЭМ Invalid input. Please enter a number.")

def get_language_config(choice):
    """Get language configuration based on choice"""
    languages = {
        1: {"code": "en-IN", "name": "English", "native": "English", "flag": "ЁЯЗоЁЯЗ│"},
        2: {"code": "hi-IN", "name": "Hindi", "native": "рд╣рд┐рдиреНрджреА", "flag": "ЁЯЗоЁЯЗ│"},
        3: {"code": "bn-IN", "name": "Bengali", "native": "ржмрж╛ржВрж▓рж╛", "flag": "ЁЯЗоЁЯЗ│"},
        4: {"code": "te-IN", "name": "Telugu", "native": "р░др▒Жр░▓р▒Бр░Чр▒Б", "flag": "ЁЯЗоЁЯЗ│"},
        5: {"code": "mr-IN", "name": "Marathi", "native": "рдорд░рд╛рдареА", "flag": "ЁЯЗоЁЯЗ│"},
        6: {"code": "ta-IN", "name": "Tamil", "native": "родрооро┐ро┤рпН", "flag": "ЁЯЗоЁЯЗ│"},
        7: {"code": "gu-IN", "name": "Gujarati", "native": "ркЧрлБркЬрк░рк╛ркдрлА", "flag": "ЁЯЗоЁЯЗ│"},
        8: {"code": "ur-IN", "name": "Urdu", "native": "╪з╪▒╪п┘И", "flag": "ЁЯЗоЁЯЗ│"},
        9: {"code": "kn-IN", "name": "Kannada", "native": "р▓Хр▓ир│Нр▓ир▓б", "flag": "ЁЯЗоЁЯЗ│"},
        10: {"code": "or-IN", "name": "Odia", "native": "рмУрмбрм╝рм┐рмЖ", "flag": "ЁЯЗоЁЯЗ│"},
        11: {"code": "ml-IN", "name": "Malayalam", "native": "р┤ор┤▓р┤пр┤╛р┤│р┤В", "flag": "ЁЯЗоЁЯЗ│"},
        12: {"code": "el-GR", "name": "Greek", "native": "╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м", "flag": "ЁЯЗмЁЯЗ╖"}
    }
    return languages.get(choice)

def get_welcome_messages():
    """Get welcome messages in all languages"""
    return {
        "en-IN": "Welcome to NPCL Customer Service! I am your multilingual voice assistant.",
        "hi-IN": "рдПрдирдкреАрд╕реАрдПрд▓ рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдЖрдкрдХрд╛ рдмрд╣реБрднрд╛рд╖реА рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред",
        "bn-IN": "ржПржиржкрж┐рж╕рж┐ржПрж▓ ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ржпрж╝ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржЖржкржирж╛рж░ ржмрж╣рзБржнрж╛рж╖рж┐ржХ ржХржгрзНржа рж╕рж╣рж╛ржпрж╝ржХред",
        "te-IN": "NPCL р░Хр░╕р▒Нр░Яр░ор░░р▒Н р░╕р░░р▒Нр░╡р▒Ар░╕р▒НтАМр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В! р░ир▒Зр░ир▒Б р░ор▒А р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒НтАМр░ир░┐ред",
        "mr-IN": "рдПрдирдкреАрд╕реАрдПрд▓ рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡реЗрдд рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ! рдореА рддреБрдордЪрд╛ рдмрд╣реБрднрд╛рд╖рд┐рдХ рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗред",
        "ta-IN": "NPCL ро╡ро╛роЯро┐роХрпНроХрпИропро╛ро│ро░рпН роЪрпЗро╡рпИроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН рокройрпНроорпКро┤ро┐ роХрпБро░ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпНред",
        "gu-IN": "NPCL ркХрк╕рлНркЯркорк░ рк╕рк░рлНрк╡рк┐рк╕ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ ркмрк╣рлБркнрк╛рк╖рлА ркЕрк╡рк╛ркЬ рк╕рк╣рк╛ркпркХ ркЫрлБркВред",
        "ur-IN": "NPCL ┌й╪│┘╣┘Е╪▒ ╪│╪▒┘И╪│ ┘Е█М┌║ ╪в┘╛ ┌й╪з ╪о┘И╪┤ ╪в┘Е╪п█М╪п! ┘Е█М┌║ ╪в┘╛ ┌й╪з ┌й╪л█М╪▒ ┘Д╪│╪з┘Ж█М ╪в┘И╪з╪▓ ┘Е╪╣╪з┘И┘Ж █Б┘И┌║█Ф",
        "kn-IN": "NPCL р▓Чр│Нр▓░р▓╛р▓╣р▓Х р▓╕р│Зр▓╡р│Жр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о р▓мр▓╣р│Бр▓нр▓╛р▓╖р▓╛ р▓зр│Нр▓╡р▓ир▓┐ р▓╕р▓╣р▓╛р▓пр▓Х.",
        "or-IN": "NPCL рмЧрнНрм░рм╛рм╣рмХ рм╕рнЗрммрм╛рм░рнЗ рмЖрмкрмгрмЩрнНрмХрнБ рм╕рнНрн▒рм╛рмЧрмд! рморнБрмБ рмЖрмкрмгрмЩрнНрмХрм░ рммрм╣рнБрмнрм╛рм╖рнА рм╕рнНрн▒рм░ рм╕рм╣рм╛рнЯрмХред",
        "ml-IN": "NPCL р┤Хр┤╕р╡Нр┤▒р╡Нр┤▒р┤ор╡╝ р┤╕р╡╝р┤╡р╡Ар┤╕р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤мр┤╣р╡Бр┤нр┤╛р┤╖р┤╛ р┤╢р┤мр╡Нр┤ж р┤╕р┤╣р┤╛р┤пр┤Хр┤ир┤╛р┤гр╡Нред",
        "el-GR": "╬Ъ╬▒╬╗╧О╧В ╬о╧Б╬╕╬▒╧Д╬╡ ╧Г╧Д╬╖╬╜ ╬╡╬╛╧Е╧А╬╖╧Б╬н╧Д╬╖╧Г╬╖ ╧А╬╡╬╗╬▒╧Д╧О╬╜ NPCL! ╬Х╬п╬╝╬▒╬╣ ╬┐ ╧А╬┐╬╗╧Е╬│╬╗╧Й╧Г╧Г╬╣╬║╧М╧В ╧Ж╧Й╬╜╬╖╧Д╬╣╬║╧М╧В ╧Г╬▒╧В ╬▓╬┐╬╖╬╕╧М╧Вред"
    }

def get_mode_selection_messages():
    """Get mode selection messages in all languages"""
    return {
        "en-IN": {
            "title": "ЁЯОп Choose Your Assistant Mode:",
            "chat": "ЁЯТм Chat Mode - Text-based conversation",
            "voice": "ЁЯОд Voice Mode - Real-time voice conversation",
            "combined": "ЁЯОн Combined Mode - Voice + Chat",
            "exit": "тЭМ Exit",
            "prompt": "Enter your choice (1-4): ",
            "note": "ЁЯТб Note: If API quota is exceeded, offline mode will start automatically"
        },
        "hi-IN": {
            "title": "ЁЯОп рдЕрдкрдирд╛ рд╕рд╣рд╛рдпрдХ рдореЛрдб рдЪреБрдиреЗрдВ:",
            "chat": "ЁЯТм рдЪреИрдЯ рдореЛрдб - рдЯреЗрдХреНрд╕реНрдЯ-рдЖрдзрд╛рд░рд┐рдд рдмрд╛рддрдЪреАрдд",
            "voice": "ЁЯОд рд╡реЙрдпрд╕ рдореЛрдб - рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рд╡реЙрдпрд╕ рдмрд╛рддрдЪреАрдд",
            "combined": "ЁЯОн рд╕рдВрдпреБрдХреНрдд рдореЛрдб - рд╡реЙрдпрд╕ + рдЪреИрдЯ",
            "exit": "тЭМ рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ",
            "prompt": "рдЕрдкрдиреА рдкрд╕рдВрдж рджрд░реНрдЬ рдХрд░реЗрдВ (1-4): ",
            "note": "ЁЯТб рдиреЛрдЯ: рдпрджрд┐ API рдХреЛрдЯрд╛ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ, рддреЛ рдСрдлрд╝рд▓рд╛рдЗрди рдореЛрдб рдЕрдкрдиреЗ рдЖрдк рд╢реБрд░реВ рд╣реЛ рдЬрд╛рдПрдЧрд╛"
        },
        "bn-IN": {
            "title": "ЁЯОп ржЖржкржирж╛рж░ рж╕рж╣рж╛ржпрж╝ржХ ржорзЛржб ржмрзЗржЫрзЗ ржирж┐ржи:",
            "chat": "ЁЯТм ржЪрзНржпрж╛ржЯ ржорзЛржб - ржЯрзЗржХрзНрж╕ржЯ-ржнрж┐рждрзНрждрж┐ржХ ржХржерзЛржкржХржержи",
            "voice": "ЁЯОд ржнржпрж╝рзЗрж╕ ржорзЛржб - рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржнржпрж╝рзЗрж╕ ржХржерзЛржкржХржержи",
            "combined": "ЁЯОн рж╕ржорзНржорж┐рж▓рж┐ржд ржорзЛржб - ржнржпрж╝рзЗрж╕ + ржЪрзНржпрж╛ржЯ",
            "exit": "тЭМ ржкрзНрж░рж╕рзНржерж╛ржи",
            "prompt": "ржЖржкржирж╛рж░ ржкржЫржирзНржж рж▓рж┐ржЦрзБржи (1-4): ",
            "note": "ЁЯТб ржирзЛржЯ: ржпржжрж┐ API ржХрзЛржЯрж╛ рж╢рзЗрж╖ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝, ржЕржлрж▓рж╛ржЗржи ржорзЛржб рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ рж╢рзБрж░рзБ рж╣ржмрзЗ"
        },
        "el-GR": {
            "title": "ЁЯОп ╬Х╧А╬╣╬╗╬н╬╛╧Д╬╡ ╧Д╬╖ ╬╗╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ ╧Д╬┐╧Е ╬▓╬┐╬╖╬╕╬┐╧Н ╧Г╬▒╧В:",
            "chat": "ЁЯТм ╬Ы╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ Chat - ╬г╧Е╬╜╬┐╬╝╬╣╬╗╬п╬▒ ╬▓╬▒╧Г╬╣╧Г╬╝╬н╬╜╬╖ ╧Г╬╡ ╬║╬╡╬п╬╝╬╡╬╜╬┐",
            "voice": "ЁЯОд ╬Ы╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ ╧Ж╧Й╬╜╬о╧В - ╬г╧Е╬╜╬┐╬╝╬╣╬╗╬п╬▒ ╧Ж╧Й╬╜╬о╧В ╧Г╬╡ ╧А╧Б╬▒╬│╬╝╬▒╧Д╬╣╬║╧М ╧З╧Б╧М╬╜╬┐",
            "combined": "ЁЯОн ╬г╧Е╬╜╬┤╧Е╬▒╧Г╬╝╬н╬╜╬╖ ╬╗╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ - ╬ж╧Й╬╜╬о + Chat",
            "exit": "тЭМ ╬И╬╛╬┐╬┤╬┐╧В",
            "prompt": "╬Х╬╣╧Г╬м╬│╬╡╧Д╬╡ ╧Д╬╖╬╜ ╬╡╧А╬╣╬╗╬┐╬│╬о ╧Г╬▒╧В (1-4): ",
            "note": "ЁЯТб ╬г╬╖╬╝╬╡╬п╧Й╧Г╬╖: ╬Х╬м╬╜ ╧Д╬┐ API quota ╬╡╬╛╬▒╬╜╧Д╬╗╬╖╬╕╬╡╬п, ╬╖ ╬╗╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ offline ╬╕╬▒ ╬╛╬╡╬║╬╣╬╜╬о╧Г╬╡╬╣ ╬▒╧Е╧Д╧М╬╝╬▒╧Д╬▒"
        }
    }

def check_api_key():
    """Check if API key is configured and test quota"""
    try:
        env_file = Path('.env')
        if not env_file.exists():
            print("тЭМ .env file not found")
            return False, None
        
        with open(env_file, 'r') as f:
            content = f.read()
            for line in content.split('\n'):
                if line.strip().startswith('GOOGLE_API_KEY='):
                    api_key = line.split('=', 1)[1].strip()
                    if api_key and api_key != 'your-google-api-key-here':
                        print("тЬЕ Google API Key: Configured")
                        
                        # Test quota
                        quota_ok = test_api_quota(api_key)
                        if quota_ok:
                            print("тЬЕ API Quota: Available")
                        else:
                            print("тЪая╕П  API Quota: Exceeded (will use offline mode)")
                        
                        return True, api_key
            
        print("тЭМ Google API Key: Not configured properly")
        return False, None
    except Exception as e:
        print(f"тЭМ Error checking API key: {e}")
        return False, None

def test_api_quota(api_key):
    """Test if API quota is available"""
    try:
        import google.generativeai as genai
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Simple test request
        response = model.generate_content("test")
        return True
        
    except Exception as e:
        error_str = str(e).lower()
        if "quota" in error_str or "exceeded" in error_str or "429" in str(e):
            return False
        return True  # Other errors might be temporary

def print_system_status():
    """Print system status"""
    print("ЁЯФН System Check:")
    
    # Check virtual environment
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("тЬЕ Virtual environment: Active")
    else:
        print("тЪая╕П  Virtual environment: Not detected")
    
    # Check API key
    api_key_valid, api_key = check_api_key()
    return api_key_valid, api_key

def speak_text_robust(text, language_code="en-IN"):
    """Enhanced TTS function with multilingual support and text cleaning"""
    try:
        # Try to import the enhanced TTS module
        from voice_assistant.audio.enhanced_tts import speak_text_enhanced
        return speak_text_enhanced(text, language_code)
    except ImportError:
        # Fallback to basic implementation if module not available
        return speak_text_basic(text, language_code)

def speak_text_basic(text, language_code="en-IN"):
    """Basic TTS fallback function"""
    try:
        import pyttsx3
        import re
        
        # Basic text cleaning for Hindi
        cleaned_text = text
        if language_code == "hi-IN":
            # Replace problematic characters
            cleaned_text = cleaned_text.replace('/', ' ')
            cleaned_text = cleaned_text.replace('\n', ' ')
            cleaned_text = re.sub(r'\s+', ' ', cleaned_text)
            cleaned_text = cleaned_text.strip()
        
        # Reinitialize engine for each call (Windows fix)
        engine = pyttsx3.init()
        
        # Configure engine
        engine.setProperty('rate', 120)  # Slower for better clarity
        engine.setProperty('volume', 1.0)
        
        # Set voice if available
        voices = engine.getProperty('voices')
        if voices:
            # Try to find a good voice
            for voice in voices:
                if 'female' in voice.name.lower() or 'zira' in voice.name.lower():
                    engine.setProperty('voice', voice.id)
                    break
            else:
                engine.setProperty('voice', voices[0].id)
        
        # Speak the cleaned text
        engine.say(cleaned_text)
        engine.runAndWait()
        
        # Cleanup engine (important for Windows)
        try:
            engine.stop()
            del engine
        except:
            pass
        
        return True
        
    except Exception as e:
        print(f"тЪая╕П  Voice error: {e}")
        print(f"Text was: {text[:50]}...")
        return False

def get_npcl_system_instruction(language_code="en-IN"):
    """Get NPCL system instruction in specified language"""
    instructions = {
        "en-IN": """You are a customer service assistant for NPCL (Noida Power Corporation Limited), a power utility company.

Your role:
- Help customers with power connection inquiries
- Handle complaint registration and status updates
- Provide professional customer service
- Use polite Indian English communication style

When customers contact you:
1. Greet them professionally
2. Ask for their connection details or complaint number
3. Provide helpful information about their power service
4. Register new complaints if needed
5. Give status updates on existing complaints

Communication style:
- Be respectful and use "Sir" or "Madam"
- Use Indian English phrases naturally
- Speak clearly and be helpful
- Keep responses concise and professional

Sample complaint number format: 0000054321
Always be ready to help with power-related issues.""",

        "hi-IN": """рдЖрдк рдПрдирдкреАрд╕реАрдПрд▓ (рдиреЛрдПрдбрд╛ рдкрд╛рд╡рд░ рдХреЙрд░реНрдкреЛрд░реЗрд╢рди рд▓рд┐рдорд┐рдЯреЗрдб) рдХреЗ рд▓рд┐рдП рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рд╕рд╣рд╛рдпрдХ рд╣реИрдВ, рдЬреЛ рдПрдХ рдкрд╛рд╡рд░ рдпреВрдЯрд┐рд▓рд┐рдЯреА рдХрдВрдкрдиреА рд╣реИред

рдЖрдкрдХреА рднреВрдорд┐рдХрд╛:
- рдмрд┐рдЬрд▓реА рдХрдиреЗрдХреНрд╢рди рдХреА рдкреВрдЫрддрд╛рдЫ рдореЗрдВ рдЧреНрд░рд╛рд╣рдХреЛрдВ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░рдирд╛
- рд╢рд┐рдХрд╛рдпрдд рдкрдВрдЬреАрдХрд░рдг рдФрд░ рд╕реНрдерд┐рддрд┐ рдЕрдкрдбреЗрдЯ рдХреЛ рд╕рдВрднрд╛рд▓рдирд╛
- рдкреЗрд╢реЗрд╡рд░ рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рдкреНрд░рджрд╛рди рдХрд░рдирд╛
- рд╡рд┐рдирдореНрд░ рд╣рд┐рдВрджреА рд╕рдВрд╡рд╛рдж рд╢реИрд▓реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛

рдЬрдм рдЧреНрд░рд╛рд╣рдХ рдЖрдкрд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рддреЗ рд╣реИрдВ:
1. рдЙрдирдХрд╛ рдкреЗрд╢реЗрд╡рд░ рддрд░реАрдХреЗ рд╕реЗ рд╕реНрд╡рд╛рдЧрдд рдХрд░реЗрдВ
2. рдЙрдирдХреЗ рдХрдиреЗрдХреНрд╢рди рд╡рд┐рд╡рд░рдг рдпрд╛ рд╢рд┐рдХрд╛рдпрдд рд╕рдВрдЦреНрдпрд╛ рдХреЗ рд▓рд┐рдП рдкреВрдЫреЗрдВ
3. рдЙрдирдХреА рдмрд┐рдЬрд▓реА рд╕реЗрд╡рд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕рд╣рд╛рдпрдХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВ
4. рдЖрд╡рд╢реНрдпрдХрддрд╛ рдкрдбрд╝рдиреЗ рдкрд░ рдирдИ рд╢рд┐рдХрд╛рдпрддреЗрдВ рджрд░реНрдЬ рдХрд░реЗрдВ
5. рдореМрдЬреВрджрд╛ рд╢рд┐рдХрд╛рдпрддреЛрдВ рдкрд░ рд╕реНрдерд┐рддрд┐ рдЕрдкрдбреЗрдЯ рджреЗрдВ

рд╕рдВрд╡рд╛рдж рд╢реИрд▓реА:
- рд╕рдореНрдорд╛рдирдЬрдирдХ рд░рд╣реЗрдВ рдФрд░ "рд╕рд░" рдпрд╛ "рдореИрдбрдо" рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рд╣рд┐рдВрджреА рд╡рд╛рдХреНрдпреЛрдВ рдХрд╛ рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ рдФрд░ рд╕рд╣рд╛рдпрдХ рдмрдиреЗрдВ
- рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдУрдВ рдХреЛ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рдкреЗрд╢реЗрд╡рд░ рд░рдЦреЗрдВ

рдирдореВрдирд╛ рд╢рд┐рдХрд╛рдпрдд рд╕рдВрдЦреНрдпрд╛ рдкреНрд░рд╛рд░реВрдк: 0000054321
рд╣рдореЗрд╢рд╛ рдмрд┐рдЬрд▓реА рд╕рдВрдмрдВрдзреА рд╕рдорд╕реНрдпрд╛рдУрдВ рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд░рд╣реЗрдВред""",

        "bn-IN": """ржЖржкржирж┐ ржПржиржкрж┐рж╕рж┐ржПрж▓ (ржирзЛржпрж╝рзЗржбрж╛ ржкрж╛ржУржпрж╝рж╛рж░ ржХрж░рзНржкрзЛрж░рзЗрж╢ржи рж▓рж┐ржорж┐ржЯрзЗржб) ржПрж░ ржЬржирзНржп ржПржХржЬржи ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ рж╕рж╣рж╛ржпрж╝ржХ, ржпрж╛ ржПржХржЯрж┐ ржкрж╛ржУржпрж╝рж╛рж░ ржЗржЙржЯрж┐рж▓рж┐ржЯрж┐ ржХрзЛржорзНржкрж╛ржирж┐ред

ржЖржкржирж╛рж░ ржнрзВржорж┐ржХрж╛:
- ржмрж┐ржжрзНржпрзБрзО рж╕ржВржпрзЛржЧрзЗрж░ ржЕржирзБрж╕ржирзНржзрж╛ржирзЗ ржЧрзНрж░рж╛рж╣ржХржжрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛
- ржЕржнрж┐ржпрзЛржЧ ржирж┐ржмржирзНржзржи ржПржмржВ рж╕рзНржерж┐рждрж┐ ржЖржкржбрзЗржЯ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рж╛
- ржкрзЗрж╢рж╛ржжрж╛рж░ ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛
- ржнржжрзНрж░ ржмрж╛ржВрж▓рж╛ ржпрзЛржЧрж╛ржпрзЛржЧ рж╢рзИрж▓рзА ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛

ржпржЦржи ржЧрзНрж░рж╛рж╣ржХрж░рж╛ ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзЗржи:
1. рждрж╛ржжрзЗрж░ ржкрзЗрж╢рж╛ржжрж╛рж░ржнрж╛ржмрзЗ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржи
2. рждрж╛ржжрзЗрж░ рж╕ржВржпрзЛржЧрзЗрж░ ржмрж┐ржмрж░ржг ржмрж╛ ржЕржнрж┐ржпрзЛржЧ ржиржорзНржмрж░ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи
3. рждрж╛ржжрзЗрж░ ржмрж┐ржжрзНржпрзБрзО рж╕рзЗржмрж╛ рж╕ржорзНржкрж░рзНржХрзЗ рж╕рж╣рж╛ржпрж╝ржХ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи
4. ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржирждрзБржи ржЕржнрж┐ржпрзЛржЧ ржирж┐ржмржирзНржзржи ржХрж░рзБржи
5. ржмрж┐ржжрзНржпржорж╛ржи ржЕржнрж┐ржпрзЛржЧрзЗрж░ рж╕рзНржерж┐рждрж┐ ржЖржкржбрзЗржЯ ржжрж┐ржи

ржпрзЛржЧрж╛ржпрзЛржЧ рж╢рзИрж▓рзА:
- рж╕ржорзНржорж╛ржиржЬржиржХ ржерж╛ржХрзБржи ржПржмржВ "рж╕рзНржпрж╛рж░" ржмрж╛ "ржорзНржпрж╛ржбрж╛ржо" ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- ржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржпрж╛ржВрж╢ ржкрзНрж░рж╛ржХрзГрждрж┐ржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржХржерж╛ ржмрж▓рзБржи ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ рж╣ржи
- ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржПржмржВ ржкрзЗрж╢рж╛ржжрж╛рж░ рж░рж╛ржЦрзБржи

ржиржорзБржирж╛ ржЕржнрж┐ржпрзЛржЧ ржиржорзНржмрж░ ржмрж┐ржирзНржпрж╛рж╕: 0000054321
рж╕рж░рзНржмржжрж╛ ржмрж┐ржжрзНржпрзБрзО рж╕ржВржХрзНрж░рж╛ржирзНржд рж╕ржорж╕рзНржпрж╛ржпрж╝ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд ржерж╛ржХрзБржиред""",

        "el-GR": """╬Х╬п╧Г╧Д╬╡ ╬▓╬┐╬╖╬╕╧М╧В ╬╡╬╛╧Е╧А╬╖╧Б╬н╧Д╬╖╧Г╬╖╧В ╧А╬╡╬╗╬▒╧Д╧О╬╜ ╬│╬╣╬▒ ╧Д╬╖╬╜ NPCL (Noida Power Corporation Limited), ╬╝╬╣╬▒ ╬╡╧Д╬▒╬╣╧Б╬╡╬п╬▒ ╬║╬┐╬╣╬╜╬о╧В ╧Й╧Ж╬н╬╗╬╡╬╣╬▒╧В ╬╖╬╗╬╡╬║╧Д╧Б╬╣╬║╬о╧В ╬╡╬╜╬н╧Б╬│╬╡╬╣╬▒╧В.

╬Я ╧Б╧М╬╗╬┐╧В ╧Г╬▒╧В:
- ╬Т╬┐╬╖╬╕╬о╧Г╧Д╬╡ ╧Д╬┐╧Е╧В ╧А╬╡╬╗╬м╧Д╬╡╧В ╬╝╬╡ ╬╡╧Б╧Й╧Д╬о╬╝╬▒╧Д╬▒ ╧Г╧Н╬╜╬┤╬╡╧Г╬╖╧В ╧Б╬╡╧Н╬╝╬▒╧Д╬┐╧В
- ╬з╬╡╬╣╧Б╬╣╧Г╧Д╬╡╬п╧Д╬╡ ╧Д╬╖╬╜ ╬║╬▒╧Д╬▒╧З╧О╧Б╬╖╧Г╬╖ ╧А╬▒╧Б╬▒╧А╧М╬╜╧Й╬╜ ╬║╬▒╬╣ ╬╡╬╜╬╖╬╝╬╡╧Б╧О╧Г╬╡╬╣╧В ╬║╬▒╧Д╬м╧Г╧Д╬▒╧Г╬╖╧В
- ╬а╬▒╧Б╬н╧З╬╡╧Д╬╡ ╬╡╧А╬▒╬│╬│╬╡╬╗╬╝╬▒╧Д╬╣╬║╬о ╬╡╬╛╧Е╧А╬╖╧Б╬н╧Д╬╖╧Г╬╖ ╧А╬╡╬╗╬▒╧Д╧О╬╜
- ╬з╧Б╬╖╧Г╬╣╬╝╬┐╧А╬┐╬╣╬о╧Г╧Д╬╡ ╬╡╧Е╬│╬╡╬╜╬╣╬║╧М ╬╡╬╗╬╗╬╖╬╜╬╣╬║╧М ╧Г╧Д╧Е╬╗ ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬п╬▒╧В

╬М╧Д╬▒╬╜ ╬┐╬╣ ╧А╬╡╬╗╬м╧Д╬╡╧В ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬┐╧Н╬╜ ╬╝╬▒╬╢╬п ╧Г╬▒╧В:
1. ╬Ъ╬▒╬╗╧Й╧Г╬┐╧Б╬п╧Г╧Д╬╡ ╧Д╬┐╧Е╧В ╬╡╧А╬▒╬│╬│╬╡╬╗╬╝╬▒╧Д╬╣╬║╬м
2. ╬Ц╬╖╧Д╬о╧Г╧Д╬╡ ╧Д╬▒ ╧Г╧Д╬┐╬╣╧З╬╡╬п╬▒ ╧Г╧Н╬╜╬┤╬╡╧Г╬о╧В ╧Д╬┐╧Е╧В ╬о ╧Д╬┐╬╜ ╬▒╧Б╬╣╬╕╬╝╧М ╧А╬▒╧Б╬▒╧А╧М╬╜╬┐╧Е
3. ╬а╬▒╧Б╬н╧З╬╡╧Д╬╡ ╧З╧Б╬о╧Г╬╣╬╝╬╡╧В ╧А╬╗╬╖╧Б╬┐╧Ж╬┐╧Б╬п╬╡╧В ╬│╬╣╬▒ ╧Д╬╖╬╜ ╧Е╧А╬╖╧Б╬╡╧Г╬п╬▒ ╧Б╬╡╧Н╬╝╬▒╧Д╧М╧В ╧Д╬┐╧Е╧В
4. ╬Ъ╬▒╧Д╬▒╧З╧Й╧Б╬о╧Г╧Д╬╡ ╬╜╬н╬▒ ╧А╬▒╧Б╬м╧А╬┐╬╜╬▒ ╬╡╬м╬╜ ╧З╧Б╬╡╬╣╬м╬╢╬╡╧Д╬▒╬╣
5. ╬Ф╧О╧Г╧Д╬╡ ╬╡╬╜╬╖╬╝╬╡╧Б╧О╧Г╬╡╬╣╧В ╬║╬▒╧Д╬м╧Г╧Д╬▒╧Г╬╖╧В ╬│╬╣╬▒ ╧Е╧А╬м╧Б╧З╬┐╬╜╧Д╬▒ ╧А╬▒╧Б╬м╧А╬┐╬╜╬▒

╬г╧Д╧Е╬╗ ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬п╬▒╧В:
- ╬Э╬▒ ╬╡╬п╧Г╧Д╬╡ ╧Г╬╡╬▓╬▒╧Г╧Д╬┐╬п ╬║╬▒╬╣ ╬╜╬▒ ╧З╧Б╬╖╧Г╬╣╬╝╬┐╧А╬┐╬╣╬╡╬п╧Д╬╡ "╬Ъ╧Н╧Б╬╣╬╡" ╬о "╬Ъ╧Е╧Б╬п╬▒"
- ╬з╧Б╬╖╧Г╬╣╬╝╬┐╧А╬┐╬╣╬о╧Г╧Д╬╡ ╬╡╬╗╬╗╬╖╬╜╬╣╬║╬н╧В ╧Ж╧Б╬м╧Г╬╡╬╣╧В ╧Ж╧Е╧Г╬╣╬║╬м
- ╬Ь╬╣╬╗╬о╧Г╧Д╬╡ ╬║╬▒╬╕╬▒╧Б╬м ╬║╬▒╬╣ ╬╜╬▒ ╬╡╬п╧Г╧Д╬╡ ╧З╧Б╬о╧Г╬╣╬╝╬┐╬╣
- ╬Ъ╧Б╬▒╧Д╬о╧Г╧Д╬╡ ╧Д╬╣╧В ╬▒╧А╬▒╬╜╧Д╬о╧Г╬╡╬╣╧В ╧Г╧Е╬╜╬┐╧А╧Д╬╣╬║╬н╧В ╬║╬▒╬╣ ╬╡╧А╬▒╬│╬│╬╡╬╗╬╝╬▒╧Д╬╣╬║╬н╧В

╬Ф╬╡╬п╬│╬╝╬▒ ╬╝╬┐╧Б╧Ж╬о╧В ╬▒╧Б╬╣╬╕╬╝╬┐╧Н ╧А╬▒╧Б╬▒╧А╧М╬╜╬┐╧Е: 0000054321
╬Э╬▒ ╬╡╬п╧Г╧Д╬╡ ╧А╬м╬╜╧Д╬▒ ╬н╧Д╬┐╬╣╬╝╬┐╬╣ ╬╜╬▒ ╬▓╬┐╬╖╬╕╬о╧Г╬╡╧Д╬╡ ╬╝╬╡ ╬╕╬н╬╝╬▒╧Д╬▒ ╧А╬┐╧Е ╧Г╧З╬╡╧Д╬п╬╢╬┐╬╜╧Д╬▒╬╣ ╬╝╬╡ ╧Д╬┐ ╧Б╬╡╧Н╬╝╬▒."""
    }
    
    return instructions.get(language_code, instructions["en-IN"])

def start_multilingual_chat_mode(api_key, language_config):
    """Start multilingual chat mode"""
    # Clear terminal for clean conversation interface
    import os
    os.system('cls' if os.name == 'nt' else 'clear')
    
    lang_code = language_config["code"]
    lang_name = language_config["native"]
    flag = language_config["flag"]
    
    print(f"ЁЯТм NPCL Voice Assistant - Chat Mode")
    print(f"{flag} Language: {lang_name}")
    print("=" * 40)
    print()
    
    # Test TTS availability
    tts_available = False
    try:
        import pyttsx3
        # Test with a quick initialization
        test_engine = pyttsx3.init()
        test_engine.stop()
        del test_engine
        tts_available = True
        print("ЁЯФК Voice output enabled (Robust Mode)")
        
    except ImportError:
        print("тЪая╕П  Text-to-speech not available. Install: pip install pyttsx3")
        print("ЁЯТм Continuing with text-only mode...")
    except Exception as e:
        print(f"тЪая╕П  Voice setup failed: {e}")
        print("ЁЯТм Continuing with text-only mode...")
    
    print()
    
    try:
        import google.generativeai as genai
        
        # Configure Gemini
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Test quota before starting conversation
        try:
            # Quick quota test
            test_response = model.generate_content("test")
        except Exception as e:
            if "quota" in str(e).lower() or "429" in str(e):
                print(f"тЪая╕П  API quota exceeded. Switching to offline mode...")
                print(f"ЁЯФД Restarting in offline mode...")
                start_offline_mode(language_config)
                return
            else:
                print(f"тЭМ API error: {e}")
                return
        
        # Generate and speak welcome message
        try:
            system_prompt = get_npcl_system_instruction(lang_code)
            welcome_messages = get_welcome_messages()
            welcome_text = welcome_messages.get(lang_code, welcome_messages["en-IN"])
            
            # Add instruction to respond in the selected language
            language_instruction = f"Please respond in {language_config['name']} language. "
            if lang_code != "en-IN":
                language_instruction += f"Always use {language_config['name']} script and vocabulary. "
            
            enhanced_prompt = system_prompt + f"\n\n{language_instruction}Please start by welcoming the customer to NPCL customer service in {language_config['name']} language."
            
            initial_response = model.generate_content(enhanced_prompt)
            ai_welcome = initial_response.text
            
            print(f"ЁЯдЦ NPCL Assistant: {ai_welcome}")
            print()
            
            # Speak the welcome message using robust TTS
            if tts_available:
                speak_text_robust(ai_welcome, lang_code)
            
        except Exception as e:
            if "quota" in str(e).lower() or "429" in str(e):
                print(f"тЪая╕П  API quota exceeded during welcome. Switching to offline mode...")
                start_offline_mode(language_config)
                return
            else:
                print(f"тЭМ Failed to generate welcome: {e}")
                # Fallback welcome
                welcome_messages = get_welcome_messages()
                fallback_welcome = welcome_messages.get(lang_code, welcome_messages["en-IN"])
                print(f"ЁЯдЦ NPCL Assistant: {fallback_welcome}")
                if tts_available:
                    speak_text_robust(fallback_welcome, lang_code)
        
        while True:
            try:
                user_input = input(f"\nЁЯСд You ({lang_name}): ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'bye', 'goodbye', 'рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ', 'ржкрзНрж░рж╕рзНржерж╛ржи', '╬н╬╛╬┐╬┤╬┐╧В']:
                    goodbye_messages = {
                        "en-IN": "Thank you for contacting NPCL. Have a great day!",
                        "hi-IN": "рдПрдирдкреАрд╕реАрдПрд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХрд╛ рджрд┐рди рд╢реБрдн рд╣реЛ!",
                        "bn-IN": "ржПржиржкрж┐рж╕рж┐ржПрж▓-ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржкржирж╛рж░ ржжрж┐ржи рж╢рзБржн рж╣рзЛржХ!",
                        "el-GR": "╬Х╧Е╧З╬▒╧Б╬╣╧Г╧Д╬┐╧Н╬╝╬╡ ╧А╬┐╧Е ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬о╧Г╬▒╧Д╬╡ ╬╝╬╡ ╧Д╬╖╬╜ NPCL. ╬Э╬▒ ╬н╧З╬╡╧Д╬╡ ╬╝╬╣╬▒ ╧Е╧А╬н╧Б╬┐╧З╬╖ ╬╝╬н╧Б╬▒!"
                    }
                    goodbye_msg = goodbye_messages.get(lang_code, goodbye_messages["en-IN"])
                    print(f"ЁЯСЛ {goodbye_msg}")
                    if tts_available:
                        speak_text_robust(goodbye_msg, lang_code)
                    break
                
                if not user_input:
                    continue
                
                # Get AI response with quota check
                try:
                    # Enhanced prompt with language instruction
                    language_instruction = f"Please respond in {language_config['name']} language only. "
                    if lang_code != "en-IN":
                        language_instruction += f"Use {language_config['name']} script and vocabulary. "
                    
                    prompt = f"{system_prompt}\n\n{language_instruction}\n\nUser: {user_input}\nAssistant:"
                    response = model.generate_content(prompt)
                    
                    # Display and speak the response
                    response_text = response.text
                    print(f"ЁЯдЦ NPCL Assistant: {response_text}")
                    print()
                    
                    # Always speak the response using robust TTS
                    if tts_available:
                        speak_text_robust(response_text, lang_code)
                    
                except Exception as e:
                    if "quota" in str(e).lower() or "429" in str(e):
                        print(f"тЪая╕П  API quota exceeded. Switching to offline mode...")
                        start_offline_mode(language_config)
                        return
                    else:
                        # Fallback response for other errors
                        error_messages = {
                            "en-IN": "I apologize, but I'm having technical difficulties. Please try again or contact our customer service directly.",
                            "hi-IN": "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рд▓реЗрдХрд┐рди рдореБрдЭреЗ рддрдХрдиреАрдХреА рдХрдард┐рдирд╛рдЗрдпреЛрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣рд╛ рд╣реВрдВред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рд╕реАрдзреЗ рд╣рдорд╛рд░реА рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
                            "bn-IN": "ржЖржорж┐ ржжрзБржГржЦрж┐ржд, ржХрж┐ржирзНрждрзБ ржЖржорж╛рж░ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ рж╕рж░рж╛рж╕рж░рж┐ ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ржпрж╝ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
                            "el-GR": "╬Ц╬╖╧Д╧О ╧Г╧Е╬│╬│╬╜╧О╬╝╬╖, ╬▒╬╗╬╗╬м ╬▒╬╜╧Д╬╣╬╝╬╡╧Д╧Й╧А╬п╬╢╧Й ╧Д╬╡╧З╬╜╬╣╬║╬н╧В ╬┤╧Е╧Г╬║╬┐╬╗╬п╬╡╧В. ╬а╬▒╧Б╬▒╬║╬▒╬╗╧О ╬┤╬┐╬║╬╣╬╝╬м╧Г╧Д╬╡ ╬╛╬▒╬╜╬м ╬о ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬о╧Г╧Д╬╡ ╬▒╧А╬╡╧Е╬╕╬╡╬п╬▒╧В ╬╝╬╡ ╧Д╬╖╬╜ ╬╡╬╛╧Е╧А╬╖╧Б╬н╧Д╬╖╧Г╬╖ ╧А╬╡╬╗╬▒╧Д╧О╬╜ ╬╝╬▒╧В."
                        }
                        fallback_response = error_messages.get(lang_code, error_messages["en-IN"])
                        print(f"ЁЯдЦ NPCL Assistant: {fallback_response}")
                        if tts_available:
                            speak_text_robust(fallback_response, lang_code)
                
            except KeyboardInterrupt:
                print("\nЁЯСЛ Chat session ended.")
                break
            except Exception as e:
                print(f"тЭМ Error: {e}")
                
    except Exception as e:
        print(f"тЭМ Failed to initialize chat: {e}")
        print("\nЁЯТб Make sure you have:")
        print("1. Valid Google API key in .env file")
        print("2. Internet connection")
        print("3. google-generativeai package installed")

def start_offline_mode(language_config):
    """Start offline mode with multilingual support and voice input"""
    try:
        # Try to use enhanced offline voice mode
        from voice_assistant.modes.voice_mode import start_offline_voice_mode
        start_offline_voice_mode(language_config)
        return
    except ImportError:
        # Fallback to basic offline mode
        pass
    
    import os
    os.system('cls' if os.name == 'nt' else 'clear')
    
    lang_code = language_config["code"]
    lang_name = language_config["native"]
    flag = language_config["flag"]
    
    print(f"ЁЯОЩя╕П NPCL Voice Assistant - Offline Mode")
    print(f"{flag} Language: {lang_name}")
    print("=" * 40)
    print("тЪая╕П  API quota exceeded - using offline responses")
    print()
    
    # Test TTS availability
    tts_available = False
    try:
        import pyttsx3
        test_engine = pyttsx3.init()
        test_engine.stop()
        del test_engine
        tts_available = True
        print("ЁЯФК Voice output enabled (Robust Mode)")
    except Exception as e:
        print(f"тЪая╕П  Voice setup failed: {e}")
    
    print()
    
    def get_offline_response(user_input, lang_code):
        """Get offline NPCL response in specified language"""
        user_lower = user_input.lower()
        
        # Offline responses in multiple languages
        responses = {
            "en-IN": {
                "greeting": "Namaste! Welcome to NPCL customer service. I'm currently in offline mode due to high demand. How can I help you with your power connection today?",
                "power": "I understand you're experiencing a power issue. Please note your complaint number: NPCL-OFF-001. Our technical team will address this within 24 hours. Is there anything else I can help with?",
                "complaint": "I can help register your complaint. Your complaint number is NPCL-OFF-002. Please keep this number for future reference. Our team will contact you within 24 hours.",
                "bill": "For billing inquiries, please visit our nearest NPCL office or call our billing helpline. Your account details are secure and will be reviewed by our billing team.",
                "connection": "For new power connections, please visit our customer service center with required documents. The process typically takes 7-10 working days.",
                "thanks": "You're welcome! Thank you for contacting NPCL. Is there anything else I can assist you with today?",
                "default": "Thank you for contacting NPCL. I'm currently in offline mode. For immediate assistance, please call our helpline or visit our customer service center. Your query is important to us."
            },
            "hi-IN": {
                "greeting": "рдирдорд╕реНрддреЗ! рдПрдирдкреАрд╕реАрдПрд▓ рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдореИрдВ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдЙрдЪреНрдЪ рдорд╛рдВрдЧ рдХреЗ рдХрд╛рд░рдг рдСрдлрд╝рд▓рд╛рдЗрди рдореЛрдб рдореЗрдВ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреЗ рдмрд┐рдЬрд▓реА рдХрдиреЗрдХреНрд╢рди рдХреЗ рд▓рд┐рдП рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
                "power": "рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдк рдмрд┐рдЬрд▓реА рдХреА рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВред рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╢рд┐рдХрд╛рдпрдд рд╕рдВрдЦреНрдпрд╛ рдиреЛрдЯ рдХрд░реЗрдВ: NPCL-OFF-001ред рд╣рдорд╛рд░реА рддрдХрдиреАрдХреА рдЯреАрдо 24 рдШрдВрдЯреЛрдВ рдХреЗ рднреАрддрд░ рдЗрд╕рдХрд╛ рд╕рдорд╛рдзрд╛рди рдХрд░реЗрдЧреАред",
                "complaint": "рдореИрдВ рдЖрдкрдХреА рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░рдиреЗ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдкрдХреА рд╢рд┐рдХрд╛рдпрдд рд╕рдВрдЦреНрдпрд╛ рд╣реИ NPCL-OFF-002ред рдХреГрдкрдпрд╛ рднрд╡рд┐рд╖реНрдп рдХреЗ рд╕рдВрджрд░реНрдн рдХреЗ рд▓рд┐рдП рдЗрд╕ рд╕рдВрдЦреНрдпрд╛ рдХреЛ рд░рдЦреЗрдВред",
                "bill": "рдмрд┐рд▓рд┐рдВрдЧ рдкреВрдЫрддрд╛рдЫ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реЗ рдирд┐рдХрдЯрддрдо рдПрдирдкреАрд╕реАрдПрд▓ рдХрд╛рд░реНрдпрд╛рд▓рдп рдореЗрдВ рдЬрд╛рдПрдВ рдпрд╛ рд╣рдорд╛рд░реА рдмрд┐рд▓рд┐рдВрдЧ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред",
                "connection": "рдирдП рдмрд┐рдЬрд▓реА рдХрдиреЗрдХреНрд╢рди рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬреЛрдВ рдХреЗ рд╕рд╛рде рд╣рдорд╛рд░реЗ рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛ рдХреЗрдВрджреНрд░ рдореЗрдВ рдЬрд╛рдПрдВред",
                "thanks": "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдПрдирдкреАрд╕реАрдПрд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдХреНрдпрд╛ рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреЛрдИ рдФрд░ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
                "default": "рдПрдирдкреАрд╕реАрдПрд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдореИрдВ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдСрдлрд╝рд▓рд╛рдЗрди рдореЛрдб рдореЗрдВ рд╣реВрдВред рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реА рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред"
            },
            "bn-IN": {
                "greeting": "ржиржорж╕рзНржХрж╛рж░! ржПржиржкрж┐рж╕рж┐ржПрж▓ ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ржпрж╝ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред ржЙржЪрзНржЪ ржЪрж╛рж╣рж┐ржжрж╛рж░ ржХрж╛рж░ржгрзЗ ржЖржорж┐ ржмрж░рзНрждржорж╛ржирзЗ ржЕржлрж▓рж╛ржЗржи ржорзЛржбрзЗ ржЖржЫрж┐ред ржЖржЬ ржЖржкржирж╛рж░ ржмрж┐ржжрзНржпрзБрзО рж╕ржВржпрзЛржЧрзЗрж░ ржЬржирзНржп ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
                "power": "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржЖржкржирж┐ ржмрж┐ржжрзНржпрзБрзО рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорзНржорзБржЦрзАржи рж╣ржЪрзНржЫрзЗржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЕржнрж┐ржпрзЛржЧ ржиржорзНржмрж░ ржирзЛржЯ ржХрж░рзБржи: NPCL-OFF-001ред ржЖржорж╛ржжрзЗрж░ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд ржжрж▓ рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржПржЯрж┐ рж╕ржорж╛ржзрж╛ржи ржХрж░ржмрзЗред",
                "complaint": "ржЖржорж┐ ржЖржкржирж╛рж░ ржЕржнрж┐ржпрзЛржЧ ржирж┐ржмржирзНржзржи ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж╛рж░ ржЕржнрж┐ржпрзЛржЧ ржиржорзНржмрж░ рж╣рж▓ NPCL-OFF-002ред ржнржмрж┐рж╖рзНржпрждрзЗрж░ рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗрж░ ржЬржирзНржп ржПржЗ ржиржорзНржмрж░ржЯрж┐ рж░рж╛ржЦрзБржиред",
                "bill": "ржмрж┐рж▓рж┐ржВ ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржЬржирзНржп, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржирж┐ржХржЯрждржо ржПржиржкрж┐рж╕рж┐ржПрж▓ ржЕржлрж┐рж╕рзЗ ржпрж╛ржи ржмрж╛ ржЖржорж╛ржжрзЗрж░ ржмрж┐рж▓рж┐ржВ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржирзЗ ржХрж▓ ржХрж░рзБржиред",
                "connection": "ржирждрзБржи ржмрж┐ржжрзНржпрзБрзО рж╕ржВржпрзЛржЧрзЗрж░ ржЬржирзНржп, ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрж╛ржЧржЬржкрждрзНрж░ ржирж┐ржпрж╝рзЗ ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ ржХрзЗржирзНржжрзНрж░рзЗ ржпрж╛ржиред",
                "thanks": "ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо! ржПржиржкрж┐рж╕рж┐ржПрж▓-ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржЬ ржЖржорж┐ ржЖржкржирж╛рж░ ржЖрж░ ржХрзЛржи рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
                "default": "ржПржиржкрж┐рж╕рж┐ржПрж▓-ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржорж┐ ржмрж░рзНрждржорж╛ржирзЗ ржЕржлрж▓рж╛ржЗржи ржорзЛржбрзЗ ржЖржЫрж┐ред рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп, ржЖржорж╛ржжрзЗрж░ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржирзЗ ржХрж▓ ржХрж░рзБржиред"
            },
            "el-GR": {
                "greeting": "╬У╬╡╬╣╬▒ ╧Г╬▒╧В! ╬Ъ╬▒╬╗╧О╧В ╬о╧Б╬╕╬▒╧Д╬╡ ╧Г╧Д╬╖╬╜ ╬╡╬╛╧Е╧А╬╖╧Б╬н╧Д╬╖╧Г╬╖ ╧А╬╡╬╗╬▒╧Д╧О╬╜ NPCL. ╬С╧Е╧Д╬о ╧Д╬╖ ╧Г╧Д╬╣╬│╬╝╬о ╬╡╬п╬╝╬▒╬╣ ╧Г╬╡ ╬╗╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ offline ╬╗╧М╬│╧Й ╧Е╧И╬╖╬╗╬о╧В ╬╢╬о╧Д╬╖╧Г╬╖╧В. ╬а╧О╧В ╬╝╧А╬┐╧Б╧О ╬╜╬▒ ╧Г╬▒╧В ╬▓╬┐╬╖╬╕╬о╧Г╧Й ╬╝╬╡ ╧Д╬╖ ╧Г╧Н╬╜╬┤╬╡╧Г╬╖ ╧Б╬╡╧Н╬╝╬▒╧Д╧М╧В ╧Г╬▒╧В ╧Г╬о╬╝╬╡╧Б╬▒;",
                "power": "╬Ъ╬▒╧Д╬▒╬╗╬▒╬▓╬▒╬п╬╜╧Й ╧М╧Д╬╣ ╬▒╬╜╧Д╬╣╬╝╬╡╧Д╧Й╧А╬п╬╢╬╡╧Д╬╡ ╧А╧Б╧М╬▓╬╗╬╖╬╝╬▒ ╬╝╬╡ ╧Д╬┐ ╧Б╬╡╧Н╬╝╬▒. ╬а╬▒╧Б╬▒╬║╬▒╬╗╧О ╧Г╬╖╬╝╬╡╬╣╧О╧Г╧Д╬╡ ╧Д╬┐╬╜ ╬▒╧Б╬╣╬╕╬╝╧М ╧А╬▒╧Б╬▒╧А╧М╬╜╬┐╧Е ╧Г╬▒╧В: NPCL-OFF-001. ╬Ч ╧Д╬╡╧З╬╜╬╣╬║╬о ╬╝╬▒╧В ╬┐╬╝╬м╬┤╬▒ ╬╕╬▒ ╧Д╬┐ ╬▒╬╜╧Д╬╣╬╝╬╡╧Д╧Й╧А╬п╧Г╬╡╬╣ ╬╡╬╜╧Д╧М╧В 24 ╧Й╧Б╧О╬╜.",
                "complaint": "╬Ь╧А╬┐╧Б╧О ╬╜╬▒ ╧Г╬▒╧В ╬▓╬┐╬╖╬╕╬о╧Г╧Й ╬╜╬▒ ╬║╬▒╧Д╬▒╧З╧Й╧Б╬о╧Г╬╡╧Д╬╡ ╧Д╬┐ ╧А╬▒╧Б╬м╧А╬┐╬╜╧М ╧Г╬▒╧В. ╬Я ╬▒╧Б╬╣╬╕╬╝╧М╧В ╧А╬▒╧Б╬▒╧А╧М╬╜╬┐╧Е ╧Г╬▒╧В ╬╡╬п╬╜╬▒╬╣ NPCL-OFF-002. ╬а╬▒╧Б╬▒╬║╬▒╬╗╧О ╬║╧Б╬▒╧Д╬о╧Г╧Д╬╡ ╬▒╧Е╧Д╧М╬╜ ╧Д╬┐╬╜ ╬▒╧Б╬╣╬╕╬╝╧М ╬│╬╣╬▒ ╬╝╬╡╬╗╬╗╬┐╬╜╧Д╬╣╬║╬о ╬▒╬╜╬▒╧Ж╬┐╧Б╬м.",
                "bill": "╬У╬╣╬▒ ╬╡╧Б╧Й╧Д╬о╬╝╬▒╧Д╬▒ ╧З╧Б╬н╧Й╧Г╬╖╧В, ╧А╬▒╧Б╬▒╬║╬▒╬╗╧О ╬╡╧А╬╣╧Г╬║╬╡╧Ж╬╕╬╡╬п╧Д╬╡ ╧Д╬┐ ╧А╬╗╬╖╧Г╬╣╬н╧Г╧Д╬╡╧Б╬┐ ╬│╧Б╬▒╧Ж╬╡╬п╬┐ NPCL ╬о ╬║╬▒╬╗╬н╧Г╧Д╬╡ ╧Д╬╖ ╬│╧Б╬▒╬╝╬╝╬о ╬▓╬┐╬о╬╕╬╡╬╣╬▒╧В ╧З╧Б╬н╧Й╧Г╬╖╧В.",
                "connection": "╬У╬╣╬▒ ╬╜╬н╬╡╧В ╧Г╧Е╬╜╬┤╬н╧Г╬╡╬╣╧В ╧Б╬╡╧Н╬╝╬▒╧Д╬┐╧В, ╧А╬▒╧Б╬▒╬║╬▒╬╗╧О ╬╡╧А╬╣╧Г╬║╬╡╧Ж╬╕╬╡╬п╧Д╬╡ ╧Д╬┐ ╬║╬н╬╜╧Д╧Б╬┐ ╬╡╬╛╧Е╧А╬╖╧Б╬н╧Д╬╖╧Г╬╖╧В ╧А╬╡╬╗╬▒╧Д╧О╬╜ ╬╝╬╡ ╧Д╬▒ ╬▒╧А╬▒╬╣╧Д╬┐╧Н╬╝╬╡╬╜╬▒ ╬н╬│╬│╧Б╬▒╧Ж╬▒.",
                "thanks": "╬а╬▒╧Б╬▒╬║╬▒╬╗╧О! ╬Х╧Е╧З╬▒╧Б╬╣╧Г╧Д╬┐╧Н╬╝╬╡ ╧А╬┐╧Е ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬о╧Г╬▒╧Д╬╡ ╬╝╬╡ ╧Д╬╖╬╜ NPCL. ╬е╧А╬м╧Б╧З╬╡╬╣ ╬║╬м╧Д╬╣ ╬м╬╗╬╗╬┐ ╬╝╬╡ ╧Д╬┐ ╬┐╧А╬┐╬п╬┐ ╬╝╧А╬┐╧Б╧О ╬╜╬▒ ╧Г╬▒╧В ╬▓╬┐╬╖╬╕╬о╧Г╧Й ╧Г╬о╬╝╬╡╧Б╬▒;",
                "default": "╬Х╧Е╧З╬▒╧Б╬╣╧Г╧Д╬┐╧Н╬╝╬╡ ╧А╬┐╧Е ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬о╧Г╬▒╧Д╬╡ ╬╝╬╡ ╧Д╬╖╬╜ NPCL. ╬С╧Е╧Д╬о ╧Д╬╖ ╧Г╧Д╬╣╬│╬╝╬о ╬╡╬п╬╝╬▒╬╣ ╧Г╬╡ ╬╗╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒ offline. ╬У╬╣╬▒ ╬м╬╝╬╡╧Г╬╖ ╬▓╬┐╬о╬╕╬╡╬╣╬▒, ╬║╬▒╬╗╬н╧Г╧Д╬╡ ╧Д╬╖ ╬│╧Б╬▒╬╝╬╝╬о ╬▓╬┐╬о╬╕╬╡╬╣╬м╧В ╬╝╬▒╧В."
            }
        }
        
        lang_responses = responses.get(lang_code, responses["en-IN"])
        
        # Check for greeting words
        if any(word in user_lower for word in ['hello', 'hi', 'hey', 'namaste', 'рдирдорд╕реНрддреЗ', 'ржиржорж╕рзНржХрж╛рж░', '╬│╬╡╬╣╬▒']):
            return lang_responses["greeting"]
        
        elif any(word in user_lower for word in ['power', 'electricity', 'outage', 'cut', 'рдмрд┐рдЬрд▓реА', 'ржмрж┐ржжрзНржпрзБрзО', '╧Б╬╡╧Н╬╝╬▒']):
            return lang_responses["power"]
        
        elif any(word in user_lower for word in ['complaint', 'problem', 'issue', 'рд╢рд┐рдХрд╛рдпрдд', 'ржЕржнрж┐ржпрзЛржЧ', '╧А╬▒╧Б╬м╧А╬┐╬╜╬┐']):
            return lang_responses["complaint"]
        
        elif any(word in user_lower for word in ['bill', 'payment', 'amount', 'рдмрд┐рд▓', 'ржмрж┐рж▓', '╬╗╬┐╬│╬▒╧Б╬╣╬▒╧Г╬╝╧М╧В']):
            return lang_responses["bill"]
        
        elif any(word in user_lower for word in ['connection', 'new', 'apply', 'рдХрдиреЗрдХреНрд╢рди', 'рж╕ржВржпрзЛржЧ', '╧Г╧Н╬╜╬┤╬╡╧Г╬╖']):
            return lang_responses["connection"]
        
        elif any(word in user_lower for word in ['thank', 'thanks', 'рдзрдиреНрдпрд╡рд╛рдж', 'ржзржирзНржпржмрж╛ржж', '╬╡╧Е╧З╬▒╧Б╬╣╧Г╧Д╧О']):
            return lang_responses["thanks"]
        
        else:
            return lang_responses["default"]
    
    # Welcome message
    welcome_messages = get_welcome_messages()
    welcome = welcome_messages.get(lang_code, welcome_messages["en-IN"])
    welcome += " I'm currently in offline mode due to high API usage, but I can still help with basic inquiries."
    
    print(f"ЁЯдЦ NPCL Assistant: {welcome}")
    print()
    if tts_available:
        speak_text_robust(welcome, lang_code)
    
    # Conversation loop
    while True:
        try:
            user_input = input(f"\nЁЯСд You ({lang_name}): ").strip()
            
            if not user_input:
                continue
                
            if user_input.lower() in ['quit', 'exit', 'bye', 'goodbye', 'рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ', 'ржкрзНрж░рж╕рзНржерж╛ржи', '╬н╬╛╬┐╬┤╬┐╧В']:
                goodbye_messages = {
                    "en-IN": "Thank you for contacting NPCL. Have a great day! Please try again later when our AI service is available.",
                    "hi-IN": "рдПрдирдкреАрд╕реАрдПрд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХрд╛ рджрд┐рди рд╢реБрдн рд╣реЛ! рдЬрдм рд╣рдорд╛рд░реА AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рд╣реЛ рддреЛ рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
                    "bn-IN": "ржПржиржкрж┐рж╕рж┐ржПрж▓-ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржкржирж╛рж░ ржжрж┐ржи рж╢рзБржн рж╣рзЛржХ! ржЖржорж╛ржжрзЗрж░ AI рж╕рзЗржмрж╛ ржЙржкрж▓ржмрзНржз рж╣рж▓рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
                    "el-GR": "╬Х╧Е╧З╬▒╧Б╬╣╧Г╧Д╬┐╧Н╬╝╬╡ ╧А╬┐╧Е ╬╡╧А╬╣╬║╬┐╬╣╬╜╧Й╬╜╬о╧Г╬▒╧Д╬╡ ╬╝╬╡ ╧Д╬╖╬╜ NPCL. ╬Э╬▒ ╬н╧З╬╡╧Д╬╡ ╬╝╬╣╬▒ ╧Е╧А╬н╧Б╬┐╧З╬╖ ╬╝╬н╧Б╬▒! ╬Ф╬┐╬║╬╣╬╝╬м╧Г╧Д╬╡ ╬╛╬▒╬╜╬м ╬▒╧Б╬│╧М╧Д╬╡╧Б╬▒ ╧М╧Д╬▒╬╜ ╬╖ ╧Е╧А╬╖╧Б╬╡╧Г╬п╬▒ AI ╬╝╬▒╧В ╬╡╬п╬╜╬▒╬╣ ╬┤╬╣╬▒╬╕╬н╧Г╬╣╬╝╬╖."
                }
                goodbye_msg = goodbye_messages.get(lang_code, goodbye_messages["en-IN"])
                print(f"ЁЯСЛ {goodbye_msg}")
                if tts_available:
                    speak_text_robust(goodbye_msg, lang_code)
                break
            
            # Get offline response
            response_text = get_offline_response(user_input, lang_code)
            print(f"ЁЯдЦ NPCL Assistant: {response_text}")
            print()
            
            # Speak the response
            if tts_available:
                speak_text_robust(response_text, lang_code)
            
        except KeyboardInterrupt:
            print("\nЁЯСЛ Voice session ended.")
            break
        except Exception as e:
            print(f"тЭМ Error: {e}")

def print_mode_options(language_config):
    """Print mode selection options in selected language"""
    lang_code = language_config["code"]
    mode_messages = get_mode_selection_messages()
    messages = mode_messages.get(lang_code, mode_messages["en-IN"])
    
    print(f"\n{messages['title']}")
    print(f"1. {messages['chat']}")
    print(f"2. {messages['voice']}")
    print(f"3. {messages['combined']}")
    print(f"4. {messages['exit']}")
    print()
    print(messages['note'])
    print()

def get_user_choice(language_config):
    """Get user's mode choice in selected language"""
    lang_code = language_config["code"]
    mode_messages = get_mode_selection_messages()
    messages = mode_messages.get(lang_code, mode_messages["en-IN"])
    
    while True:
        try:
            choice = input(messages['prompt']).strip()
            if choice in ['1', '2', '3', '4']:
                return int(choice)
            else:
                error_messages = {
                    "en-IN": "тЭМ Invalid choice. Please enter 1, 2, 3, or 4.",
                    "hi-IN": "тЭМ рдЧрд▓рдд рд╡рд┐рдХрд▓реНрдкред рдХреГрдкрдпрд╛ 1, 2, 3, рдпрд╛ 4 рджрд░реНрдЬ рдХрд░реЗрдВред",
                    "bn-IN": "тЭМ ржнрзБрж▓ ржкржЫржирзНржжред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ 1, 2, 3, ржмрж╛ 4 рж▓рж┐ржЦрзБржиред",
                    "el-GR": "тЭМ ╬Ы╬м╬╕╬┐╧В ╬╡╧А╬╣╬╗╬┐╬│╬о. ╬а╬▒╧Б╬▒╬║╬▒╬╗╧О ╬╡╬╣╧Г╬м╬│╬╡╧Д╬╡ 1, 2, 3, ╬о 4."
                }
                error_msg = error_messages.get(lang_code, error_messages["en-IN"])
                print(error_msg)
        except KeyboardInterrupt:
            goodbye_messages = {
                "en-IN": "\nЁЯСЛ Goodbye!",
                "hi-IN": "\nЁЯСЛ рдЕрд▓рд╡рд┐рджрд╛!",
                "bn-IN": "\nЁЯСЛ ржмрж┐ржжрж╛ржпрж╝!",
                "el-GR": "\nЁЯСЛ ╬С╬╜╧Д╬п╬┐!"
            }
            goodbye_msg = goodbye_messages.get(lang_code, goodbye_messages["en-IN"])
            print(goodbye_msg)
            return 4
        except Exception:
            error_messages = {
                "en-IN": "тЭМ Invalid input. Please enter a number.",
                "hi-IN": "тЭМ рдЧрд▓рдд рдЗрдирдкреБрдЯред рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред",
                "bn-IN": "тЭМ ржнрзБрж▓ ржЗржиржкрзБржЯред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред",
                "el-GR": "тЭМ ╬Ы╬м╬╕╬┐╧В ╬╡╬п╧Г╬┐╬┤╬┐╧В. ╬а╬▒╧Б╬▒╬║╬▒╬╗╧О ╬╡╬╣╧Г╬м╬│╬╡╧Д╬╡ ╬н╬╜╬▒╬╜ ╬▒╧Б╬╣╬╕╬╝╧М."
            }
            error_msg = error_messages.get(lang_code, error_messages["en-IN"])
            print(error_msg)

def main():
    """Main application entry point with multilingual support"""
    print_banner()
    
    # Check system status
    api_key_valid, api_key = print_system_status()
    
    if not api_key_valid:
        print("\nтЭМ System check failed. Please fix the issues above.")
        print("\nЁЯТб Quick fix:")
        print("1. Copy .env.example to .env")
        print("2. Get your Google API key from: https://aistudio.google.com/")
        print("3. Add your Google API key to .env file")
        return 1
    
    # Language selection first
    print_language_selection()
    language_choice = get_language_choice()
    
    if language_choice is None:
        return 1
    
    language_config = get_language_config(language_choice)
    
    # Clear screen and show selected language
    import os
    os.system('cls' if os.name == 'nt' else 'clear')
    
    print("=" * 70)
    print("ЁЯМН NPCL Multilingual Voice Assistant")
    print("ЁЯОЖ Powered by Gemini 1.5 Flash")
    print(f"{language_config['flag']} Selected Language: {language_config['native']}")
    print("=" * 70)
    
    print("\nЁЯОЖ NPCL Features:")
    print("тАв Handles power connection inquiries")
    print("тАв Manages complaint numbers and status")
    print(f"тАв {language_config['native']} conversation style")
    print("тАв Real-time voice or text interaction")
    print("тАв Professional customer service experience")
    print("тАв ЁЯЖЖ Offline mode available when quota exceeded")
    
    # Show mode options in selected language
    while True:
        print_mode_options(language_config)
        choice = get_user_choice(language_config)
        
        if choice == 4:  # Exit
            goodbye_messages = {
                "en-IN": "ЁЯСЛ Thank you for using NPCL Voice Assistant!",
                "hi-IN": "ЁЯСЛ рдПрдирдкреАрд╕реАрдПрд▓ рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!",
                "bn-IN": "ЁЯСЛ ржПржиржкрж┐рж╕рж┐ржПрж▓ ржнржпрж╝рзЗрж╕ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!",
                "el-GR": "ЁЯСЛ ╬Х╧Е╧З╬▒╧Б╬╣╧Г╧Д╬┐╧Н╬╝╬╡ ╧А╬┐╧Е ╧З╧Б╬╖╧Г╬╣╬╝╬┐╧А╬┐╬╣╬о╧Г╬▒╧Д╬╡ ╧Д╬┐╬╜ NPCL Voice Assistant!"
            }
            goodbye_msg = goodbye_messages.get(language_config["code"], goodbye_messages["en-IN"])
            print(goodbye_msg)
            break
        
        try:
            if choice == 1:  # Chat Mode
                try:
                    start_multilingual_chat_mode(api_key, language_config)
                except Exception as e:
                    if "quota" in str(e).lower() or "429" in str(e):
                        print("тЪая╕П  API quota exceeded. Starting offline mode...")
                        start_offline_mode(language_config)
                    else:
                        raise e
            elif choice == 2:  # Voice Mode
                try:
                    # Use enhanced voice mode with speech recognition
                    from voice_assistant.modes.voice_mode import start_enhanced_voice_mode
                    start_enhanced_voice_mode(api_key, language_config)
                except ImportError:
                    print("тЪая╕П  Enhanced voice mode not available. Using basic voice mode...")
                    print("ЁЯОд Voice Mode (Enhanced Chat with Voice Output)")
                    start_multilingual_chat_mode(api_key, language_config)
                except Exception as e:
                    if "quota" in str(e).lower() or "429" in str(e):
                        print("тЪая╕П  API quota exceeded. Starting offline mode...")
                        start_offline_mode(language_config)
                    else:
                        raise e
            elif choice == 3:  # Combined Mode
                try:
                    print("ЁЯОн Combined Mode (Enhanced Chat with Voice)")
                    start_multilingual_chat_mode(api_key, language_config)
                except Exception as e:
                    if "quota" in str(e).lower() or "429" in str(e):
                        print("тЪая╕П  API quota exceeded. Starting offline mode...")
                        start_offline_mode(language_config)
                    else:
                        raise e
                
        except KeyboardInterrupt:
            print("\nЁЯСЛ Session interrupted by user")
        except Exception as e:
            print(f"тЭМ Error: {e}")
            print("ЁЯФД Falling back to offline mode...")
            start_offline_mode(language_config)
        
        # Ask if user wants to try another mode
        try:
            again_messages = {
                "en-IN": "\nWould you like to try another mode? (y/n): ",
                "hi-IN": "\nрдХреНрдпрд╛ рдЖрдк рдХреЛрдИ рдФрд░ рдореЛрдб рдЖрдЬрд╝рдорд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (y/n): ",
                "bn-IN": "\nржЖржкржирж┐ ржХрж┐ ржЕржирзНржп ржХрзЛржи ржорзЛржб ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржЪрж╛ржи? (y/n): ",
                "el-GR": "\n╬Ш╬▒ ╬╕╬н╬╗╬▒╧Д╬╡ ╬╜╬▒ ╬┤╬┐╬║╬╣╬╝╬м╧Г╬╡╧Д╬╡ ╬м╬╗╬╗╬╖ ╬╗╬╡╬╣╧Д╬┐╧Е╧Б╬│╬п╬▒; (y/n): "
            }
            again_msg = again_messages.get(language_config["code"], again_messages["en-IN"])
            again = input(again_msg).strip().lower()
            if again not in ['y', 'yes', 'рд╣рд╛рдВ', 'рж╣рзНржпрж╛ржБ', '╬╜╬▒╬╣']:
                break
        except KeyboardInterrupt:
            break
    
    goodbye_messages = {
        "en-IN": "ЁЯСЛ Thank you for using NPCL Voice Assistant!",
        "hi-IN": "ЁЯСЛ рдПрдирдкреАрд╕реАрдПрд▓ рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!",
        "bn-IN": "ЁЯСЛ ржПржиржкрж┐рж╕рж┐ржПрж▓ ржнржпрж╝рзЗрж╕ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!",
        "el-GR": "ЁЯСЛ ╬Х╧Е╧З╬▒╧Б╬╣╧Г╧Д╬┐╧Н╬╝╬╡ ╧А╬┐╧Е ╧З╧Б╬╖╧Г╬╣╬╝╬┐╧А╬┐╬╣╬о╧Г╬▒╧Д╬╡ ╧Д╬┐╬╜ NPCL Voice Assistant!"
    }
    goodbye_msg = goodbye_messages.get(language_config["code"], goodbye_messages["en-IN"])
    print(goodbye_msg)
    return 0

if __name__ == "__main__":
    sys.exit(main())